 ▶ 추가
  .push(' 추가하고픈거 넣기 ');
  ex)
["a","b","c","d","e"]  이렇게 있던거를
  .push(' f ');
["a","b","c","d","e","f"] 이렇게 됨.

.concat[' ' , '  '];    --->여러개를 추가 할때 쓰는것
.unshift   ---> 앞에 값을 추가할때
.splice   ---> 배열의 특정구간을 추출 하거나, 특정구간에 특정배열을 추가함.
ex)
arraay.splice(index,howmany,element1,''''''',elementN);


인자명
데이터형
필수/옵션
설명
index 
 number
필수
 배열에 추가할 특정 배열의 위치를 가리키는 index
howmany 
number
필수
index에서부터 제거될 원소들의 수
index부터 index + howmany에 해당하는 원소들은 삭제 된다.
이 값이 0 이면 어떠한 원소도 삭제되지 않는다.
element1....elementN
number
옵션
index와 index + howmany 사이에 추가될 값
ex)
var a = ['a','b','c'];
a.splice[1,0,'d'];  이렇게 하면
a= ['a','d','b','c']; 이렇게 됨.


▶  제거
.shift();   ---> 배열의 첫번째 원소를 제거하는 방법
.pop();   ---> 배열의 끝부분 원소를 제거하는 방법


▶ 정렬
.sort();   ---> 알파벳 순서로, 가나다 순서로 됨.
.reverse();   --->역순
array.sort(sortfunc)   --->내가 원하는대로 정렬

ex)
function sortNumber(a,b){
    // 비교 대상자인 a와 b가 인자로 전달 된다.
    // alert('a:'+a+'b:'+b);
    // a에서 b를 뺀 결과가 음수면 a가 b보다 작고, 0 이면 같다.
    // sort 메서드는 return 값이 음수,양수,0, 인지에 따라 순서를 정한다.
return a-b;
}
var numbers = [20,10,9,8,7,6,5,4,3,2,1];
alert [ numbers.sort(sortNumber)];   // array,[1,2,3,.....]

ex)
function sortNumber(a,b){
    // 위의 예제와 비교해서 a와 b의 순서를 바꾸면 정렬 순서가 반대
return b-a;
}
var numbers = [20,10,9,8,7,6,5,4,3,2,1];
alert [ numbers.sort(sortNumber)];   // array,[20,10,9,.....]  


▶ 객체
객체 생성
ex)
var grades = {'egoing': 10, 'K8805': 6 , 'sorialgi' : 80};
'   '   --->안에 들어가는게 key
: 숫자   ---> value

ex)
var grades= {  };
grades['egoing'] = 10;
grades['K8805'] = 6;
grades['sorialgi'] = 80;

ex)
var grades = new object();
grades['egoing'] = 10;
grades.K8805
답 :  6 나옴

ex)
var grades = {'egoing': 10, 'K8805': 6 , 'sorialgi' : 80};
for(key in grades){
    document.write("key:"+key+"value:"+grades[key]+ "<br/>");
}
 key 부분은 다른이름으로 변경해도 됨.

▶ 모듈 VS 라이브러리
프로그램을 구성하는 작은 부품으로서의 로직 VS 자주 사용되는 로직을 재사용하기 편하도록 잘 정리한 일련의 코드들의 집합

▶ API
: Application Programming Interface의 약자로 프로그램이 동작하는 환경을 제어하기 위해서 환경에서 제공되는 조작 장치이다.

▶자바스크립트의 API
: 자바스크립트의 API는 크게 자바스크립트 자체의 API와 자바스크립트가 동작하는 호스트 환경의 API로 구분된다.

▶정규표현식
: 문자열에서 특정한 문자를 찾아내는 도구이다.
이 도구를 이용하면 수십줄이 필요한 작업을 한줄로 끝낼수 있다.

▶정규표현식 메서드 실행
:    정규표현식을 컴파일해서 객체를 만들었다면 이제 문자열에서 원하는 문자 찾아내야한다.

RegExp.exec();
ex)
var pattern = /a/;
pattern.exec('abcdef');
답: ["a"]

var pattern = /.a/;
pattern.exec('abcdef');
답: ["ab"]

RegExp.test();
: test는 인자 안에 패턴에 해당되는 문자열이 있다면 true, 없으면 false 리턴

▶ 문자열 메서드 실행
String.match()
var str = 'abcdef';
str.match(pattern);
답: ["a"]

String.replace()
: 문자열에서 패턴을 검색해서 이를 변경한 후에 변경된 값을 리턴한다.

var str = 'abcdef';
str.replace(pattern,'A');
답: "Abcdef"
